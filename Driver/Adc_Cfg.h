#ifndef ADC_CFG_H
#define ADC_CFG_H

/*============================================================================*\
 * This file was generated by the SCG framework.
 *
 * The configuration parameters were checked statically for correctness
 * by DETECT tool and code generator. DO NOT EDIT THIS FILE MANUALLY!!!
 *
 * \b Application:        ADC \n
 * \b Target:             NEC 78K0R \n
 * \b Compiler:           see Adc.h \n
 * \b Module:             Adc_Cfg.h \n
 * \b File-Revision:      1.1.1 \n
 * \b Changeable-by-user: No \n
 * \b Module-Owner:       SSA Team \n
 * \b Last-Modified:      2010/11/26 16:54:32\n
 * \b Classification:     CONFIDENTIAL \n
\*============================================================================*/

/**\file
 * Configuration File for SSA ADC module.
 *
 * \Requirements
 * \reqtrace{SSA-SDD-ADC-23-1}{SSA-REQ-ADC-392-1, SSA-REQ-ADC-394-1, SSA-REQ-ADC-395-2,
 *                             SSA-REQ-ADC-1036-1, SSA-REQ-ADC-1040-1, SSA-REQ-ADC-1048-1,
 *                             SSA-REQ-ADC-1050-1, SSA-REQ-ADC-1054-1, SSA-REQ-ADC-1056-1,
 *                             SSA-REQ-ADC-1069-1, SSA-REQ-ADC-1071-1}
 
 * version:         13 % 
 * %instance:       ctc_aud_5 %
 * %derived_by:     lzs7ws %
 * %date_created:   Tue Jun 26 15:37:20 2012 %
*/
/*============================================================================*\
 *
 * File generated on 2010/11/26 16:54:32
 * Generated using code generator (EPD) v1.1.1
 *
\*============================================================================*/

/*============================================================================*\
 *
 * Copyright 2010  Controls & Security, All Rights Reserved
 * It is not allowed to reproduce or utilize parts of this document in any form
 * or by any means, including photocopying and microfilm, without permission in
 * written by  Electronics & Safety Division.
 *
\*============================================================================*/

/*============================================================================*\
 * UNIT TEST
\*============================================================================*/
#define ADC_UNIT_TEST (STD_OFF)

/*============================================================================*\
 * PREPROCESSOR DIRECTIVES
\*============================================================================*/

/* INCLUDE DIRECTIVES FOR STANDARD HEADERS -----------------------------------*/

#include "Std_Types.h"

/* INCLUDE DIRECTIVES FOR OTHER HEADERS --------------------------------------*/

/* EXPORTED DEFINES OR CONSTANTS --------------------------------------------*/

/**
 * \defgroup
 * \name Published information:
 * \details
 * 1. Major, minor and patch version number of AUTOSAR specification on which the
 * appropriate implementation is based on. \n
 * 2. Software major, minor and patch version of this module. \n
 * SDD: Specific numbers are given only as example of implementation. \n
 * @{
 */
#define ADC_CFG_AR_MAJOR_VERSION                    (2u)
#define ADC_CFG_AR_MINOR_VERSION                    (1u)
#define ADC_CFG_AR_PATCH_VERSION                    (0u)

#define ADC_CFG_SW_MAJOR_VERSION                    (1u)
#define ADC_CFG_SW_MINOR_VERSION                    (1u)
/*@}*/


/* EXPORTED DEFINE MACROS (#, ##) --------------------------------------------*/

/**
 * Development error notification API switch.
 * \n
 * \Requirements \n
 * \reqtrace{SSA-SDD-ADC-24-1}{SSA-REQ-ADC-624-1, SSA-REQ-ADC-625-1, SSA-REQ-ADC-631-1,
 *                             SSA-REQ-ADC-1041-1}
 */
#define ADC_DEV_ERROR_DETECT   (STD_OFF)


/**
 * \defgroup ApiFunctionsSwitch
 * \name API functions switches
 * These switches enable or disable API functions
 * @{
 */

/**
 * Adds/removes the service Adc_GetVersionInfo from the code.
 * \n
 * \Requirements \n
 * \reqtrace{SSA-SDD-ADC-25-1}{SSA-REQ-ADC-1042-1}
 */
#define ADC_VERSION_INFO_API   (STD_OFF)

/**
 * Adds/removes the service Adc_DeInit from the code.
 * \n
 * \Requirements \n
 * \reqtrace{SSA-SDD-ADC-26-1}{SSA-REQ-ADC-1043-1}
 */
#define ADC_DEINIT_API   (STD_ON)

/**
 * Adds/removes the services Adc_StartGroupConversion and Adc_StopGroupConversion from the code.
 * \n
 * \Requirements \n
 * \reqtrace{SSA-SDD-ADC-27-1}{SSA-REQ-ADC-1044-1}
 */
#define ADC_ENABLE_START_STOP_GROUP_API   (STD_ON)

/**
 * Determines, if the group notification mechanism (the functions to enable and disable the notifications) is available at runtime.
 * \n
 * \Requirements \n
 * \reqtrace{SSA-SDD-ADC-28-1}{SSA-REQ-ADC-1046-1}
 */
#define ADC_GRP_NOTIF_CAPABILITY   (STD_OFF)

/**
 * Determines the number of available priority levels for  project are 0 and 1.
 *    State '1' means a support of the priority mechanism.
 *    State '0' means that the priority mechanism is not available.
 *    Any other value is incorrect and means that the priority mechanism is not available.
 * \n
 * \Requirements \n
 * \reqtrace{SSA-SDD-ADC-30-1}{SSA-REQ-ADC-1047-1, SSA-REQ-ADC-586-1, SSA-REQ-ADC-588-1,
 *                             SSA-REQ-ADC-592-1, SSA-REQ-ADC-593-1, SSA-REQ-ADC-595-1}
 */
#define ADC_GRP_PRIORITY_IMP_LEVEL (STD_OFF)

/*@}*/


/**
 * Number of defined groups.
 */
#define ADC_NB_GROUP ((uint8)6)


/**
 * \defgroup ADC groups parameters
 * \name ADC groups parameters
 * \n
 * \Requirements \n
 * \reqtrace{SSA-SDD-ADC-29-1}{SSA-REQ-ADC-1057-1, SSA-REQ-ADC-1068-1}
 * @{
 */
/*----------------------------------------------------------------------------*\
 * GROUP_0 configuration                                                       *
\*----------------------------------------------------------------------------*/

/**
 * \details Group name.
 * B81: Battery voltage input
 */
#define ADC_GROUP0 ((uint8)0)
#define ADC_GROUP1 ((uint8)1)
#define ADC_GROUP2 ((uint8)2)
#define ADC_GROUP3 ((uint8)3)
#define ADC_GROUP4 ((uint8)4)
#define ADC_GROUP5 ((uint8)5)

/**
 * First channel of group. Group should have minimum one channel.
 * Channels belonging to group must be phisically consecutive.
 */
#define ADC_GROUP0_START_CHANNEL (ADC_CHANNEL0)
#define ADC_GROUP1_START_CHANNEL (ADC_CHANNEL1)
#define ADC_GROUP2_START_CHANNEL (ADC_CHANNEL2)
#define ADC_GROUP3_START_CHANNEL (ADC_CHANNEL3)
#define ADC_GROUP4_START_CHANNEL (ADC_CHANNEL4)
#define ADC_GROUP5_START_CHANNEL (ADC_CHANNEL5)

/**
 * \details Number of channels in group.
 */
#define ADC_GROUP0_LENGTH ((uint8)1)
#define ADC_GROUP1_LENGTH ((uint8)1)
#define ADC_GROUP2_LENGTH ((uint8)1)
#define ADC_GROUP3_LENGTH ((uint8)1)
#define ADC_GROUP4_LENGTH ((uint8)1)
#define ADC_GROUP5_LENGTH ((uint8)1)

/**
 * \details Priority for group.
 */
#define ADC_GROUP0_PRIORITY ((uint8)0)
#define ADC_GROUP1_PRIORITY ((uint8)0)
#define ADC_GROUP2_PRIORITY ((uint8)0)
#define ADC_GROUP3_PRIORITY ((uint8)0)
#define ADC_GROUP4_PRIORITY ((uint8)0)
#define ADC_GROUP5_PRIORITY ((uint8)0)



/**
 * \details Notification function pointer for groups. Count of groups notification shall
 * be the same as a group count.
 */
#if ( STD_ON == ADC_GRP_NOTIF_CAPABILITY )
#define ADC_GROUP0_NOTIFI_FUNCTION (NULL_PTR)
#endif /*(STD_ON == ADC_GRP_NOTIF_CAPABILITY)*/

#if ( STD_ON == ADC_GRP_NOTIF_CAPABILITY )
#define ADC_GROUP1_NOTIFI_FUNCTION (NULL_PTR)
#endif /*(STD_ON == ADC_GRP_NOTIF_CAPABILITY)*/

#if ( STD_ON == ADC_GRP_NOTIF_CAPABILITY )
#define ADC_GROUP2_NOTIFI_FUNCTION (NULL_PTR)
#endif /*(STD_ON == ADC_GRP_NOTIF_CAPABILITY)*/

#if ( STD_ON == ADC_GRP_NOTIF_CAPABILITY )
#define ADC_GROUP3_NOTIFI_FUNCTION (NULL_PTR)
#endif /*(STD_ON == ADC_GRP_NOTIF_CAPABILITY)*/

#if ( STD_ON == ADC_GRP_NOTIF_CAPABILITY )
#define ADC_GROUP4_NOTIFI_FUNCTION (NULL_PTR)
#endif /*(STD_ON == ADC_GRP_NOTIF_CAPABILITY)*/

#if ( STD_ON == ADC_GRP_NOTIF_CAPABILITY )
#define ADC_GROUP5_NOTIFI_FUNCTION (NULL_PTR)
#endif /*(STD_ON == ADC_GRP_NOTIF_CAPABILITY)*/

/*@}*/
/*----------------------------------------------------------------------------*\
 * Application specific names configuration                                                    *
\*----------------------------------------------------------------------------*/

/**
 * \defgroup Symbolic names of ADC groups and channels
 * \name Symbolic names of ADC groups and channels
 * \n
 * \Requirements 

 * \reqtrace{SSA-SDD-ADC-33-1}{SSA-REQ-ADC-1083-1}
 * @{
 */
 
#define ADC_AMP_DIAG_VOLTAGE          ADC_GROUP0
#define ADC_VOLT_DET_VOLTAGE          ADC_GROUP1
#define ADC_GPS_ANT_DET_VOLTAGE       ADC_GROUP2
#define ADC_SW1_VOLTAGE               ADC_GROUP3
#define ADC_SW2_VOLTAGE               ADC_GROUP4
#define ADC_TUNER_ANT_DET_VOLTAGE     ADC_GROUP5
//#define ADC_BATT_VOLTAGE 


/*----------------------------------------------------------------------------*/

/**
 * \details Conversion mode described by Adc_ResolutionType type.
 */
#define ADC_CONVERSION_MODE (ADC_CONV_RES_10_BIT)

/**
 * \details ADC Operation mode. (Continuous/One shot , select channel or scan, one INT or all INT)
 */
#define ADC_OPERATION_MODE (ADC_ONESHOTSELECT)

/**
 * \details Trigger selector.
 */
#define ADC_TRIGGER_SELECTOR (ADC_TRIGGER_SOFTWARE)

/**
 * \details Sample time selector.
 */
#define ADC_SAMPLE_TIME_SELECTOR (ADC_SAMPLE_CYCLE_NORM_DIS_260)

/**
 * \details ADC conversion (speed) mode.
 */
#define ADC_SPEED_MODE       (ADC_NORMAL_MODE)

/**
 * \details Discharge Before Sampling Bit.
 */
#define ADC_DISCHARGE_BEFORE_SAMPLING   (STD_ON)

/*============================================================================*\
 * EXPORTED TYPEDEF DECLARATIONS
\*============================================================================*/

/* ENUMS ---------------------------------------------------------------------*/

/* STRUCTS -------------------------------------------------------------------*/

/* UNIONS --------------------------------------------------------------------*/

/* OTHER TYPEDEFS ------------------------------------------------------------*/

/*============================================================================*\
 * EXPORTED OBJECT DECLARATIONS
\*============================================================================*/

/*============================================================================*\
 * EXPORTED FUNCTIONS PROTOTYPES
\*============================================================================*/

/**
 * Notification prototypes for all configured group's.
 * \n
 * \Requirements \n
 * \reqtrace{SSA-SDD-ADC-31-1}{SSA-REQ-ADC-974-1, SSA-REQ-ADC-976-1, SSA-REQ-ADC-982-1,
 *                             SSA-REQ-ADC-983-1, SSA-REQ-ADC-984-1, SSA-REQ-ADC-985-1,
 *                             SSA-REQ-ADC-986-1}
 */
#if (STD_ON == ADC_GRP_NOTIF_CAPABILITY)


#endif /*(STD_ON == ADC_GRP_NOTIF_CAPABILITY)*/

/*============================================================================*\
 * EXPORTED FUNCTION-LIKE-MACROS and INLINE FUNCTIONS
\*============================================================================*/

#endif /* ADC_CFG_H */

/* END OF FILE -------------------------------------------------------------- */

/*===========================================================================*\
 * File Revision History (top to bottom: last revision to first revision)
 *===========================================================================
 * Date          userid    (Description on following lines: SCR #, etc.)
 * -----------  --------   --------------------------------------------------
 * 11-July-2011   Tod      add 2 channel for HVAC SZM, and audio low/high
 
 * 02-May-2011   Wade Li
 *   - Copied from 10024438_ICP_B78_TCI~10024438_TCI_4_01:project:tci_ik#1
 * + Initial configuration for HVAC/Audio Module
 *
\*===========================================================================*/
